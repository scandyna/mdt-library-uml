class zmsDiagFrame
!!!136578.cpp!!!	zmsDiagFrame()
  // Word 1
  pvLocalDeviceAddress = 0;
  pvUstCount = 0;
  // Word 2
  pvFirstUstAddress = 0;
  pvSecondUstAddress = 0;
  // Word 3
  pvThirdUstAddress = 0;
  pvFourthUstAddress = 0;
  // Word 4
  pvCouplingLocTrain1set = false;
  pvCouplingBtTrain1set = false;
  pvCouplingLocTrain2set = false;
  pvCouplingBtTrain2set = false;
  // Word 5
  pvCouplingLocTrain3set = false;
  pvCouplingBtTrain3set = false;
  pvCouplingLocTrain4set = false;
  pvCouplingBtTrain4set = false;
  // Word 6
  pvSetDirectionSwitchToA = false;
  pvBypassBus = false;
  pvSetTerminalResistor = false;
  pvDirectionToMasterIsB = false;
  pvZmsInitComplete = false;
  // Word 6
  pvModeBusEndOpen = false;
  pvMasterSearchBeginDirectionB = false;
  pvConsiderMasterFunction = false;
  pvRunDataTransmission = false;
  // Word 7
  pvZmsNetModeMaster = false;
  pvZmsNetProgramCounterValue = 0;
  // Word 8
  pvMicasMode = UNKNOW;
  pvMicasProgramCounterValue = 0;
  // Word 9
  pvUst1TransmissionState = 0;
  pvUst1TransmissionCounterValue = 0;
  // Word 10
  pvUst2TransmissionState = 0;
  pvUst2TransmissionCounterValue = 0;
  // Word 11
  pvUst3TransmissionState = 0;
  pvUst3TransmissionCounterValue = 0;
  // Word 12
  pvUst4TransmissionState = 0;
  pvUst4TransmissionCounterValue = 0;
  // Word 13
  pvFromMasterTransmissionCounter = 0;
  // Word 14
  pvCouplingCriteriaFailure = false;
  pvEmergencyControlEnabled = false;
  pvEmergencyModeDiseabled = false;
  pvZmsNetBlockedBecauseFrontCoupling = false;
  // Word 15
  pvSearchTimeout = false;
  pvZmsInitRunning = false;
  pvFullOutputAuthorized = false;
  pvCoupligCriteriaOk = false;
  // Word 16
  pvAllDevicesProgramCounterRunning = false;
  pvTransmissionOk = false;
  pvZmsInitOk = false;
  pvZmsNetON = false;
!!!136706.cpp!!!	clear() : void
  zmsResultFrame::clear();
  // Word 1
  pvLocalDeviceAddress = 0;
  pvUstCount = 0;
  // Word 2
  pvFirstUstAddress = 0;
  pvSecondUstAddress = 0;
  // Word 3
  pvThirdUstAddress = 0;
  pvFourthUstAddress = 0;
  // Word 4
  pvCouplingLocTrain1set = false;
  pvCouplingBtTrain1set = false;
  pvCouplingLocTrain2set = false;
  pvCouplingBtTrain2set = false;
  // Word 5
  pvCouplingLocTrain3set = false;
  pvCouplingBtTrain3set = false;
  pvCouplingLocTrain4set = false;
  pvCouplingBtTrain4set = false;
  // Word 6
  pvSetDirectionSwitchToA = false;
  pvBypassBus = false;
  pvSetTerminalResistor = false;
  pvDirectionToMasterIsB = false;
  pvZmsInitComplete = false;
  // Word 6
  pvModeBusEndOpen = false;
  pvMasterSearchBeginDirectionB = false;
  pvConsiderMasterFunction = false;
  pvRunDataTransmission = false;
  // Word 7
  pvZmsNetModeMaster = false;
  pvZmsNetProgramCounterValue = 0;
  // Word 8
  pvMicasMode = UNKNOW;
  pvMicasProgramCounterValue = 0;
  // Word 9
  pvUst1TransmissionState = 0;
  pvUst1TransmissionCounterValue = 0;
  // Word 10
  pvUst2TransmissionState = 0;
  pvUst2TransmissionCounterValue = 0;
  // Word 11
  pvUst3TransmissionState = 0;
  pvUst3TransmissionCounterValue = 0;
  // Word 12
  pvUst4TransmissionState = 0;
  pvUst4TransmissionCounterValue = 0;
  // Word 13
  pvFromMasterTransmissionCounter = 0;
  // Word 14
  pvCouplingCriteriaFailure = false;
  pvEmergencyControlEnabled = false;
  pvEmergencyModeDiseabled = false;
  pvZmsNetBlockedBecauseFrontCoupling = false;
  // Word 15
  pvSearchTimeout = false;
  pvZmsInitRunning = false;
  pvFullOutputAuthorized = false;
  pvCoupligCriteriaOk = false;
  // Word 16
  pvAllDevicesProgramCounterRunning = false;
  pvTransmissionOk = false;
  pvZmsInitOk = false;
  pvZmsNetON = false;
!!!136834.cpp!!!	decode() : bool
  map<int,int> ::iterator i;
  int val;

  // On lance la méthode de la classe zmsResultFrame
  if(!zmsResultFrame::decode()){
    return false;
  }
  // Type de trame: s'il n'y a pas 32 valeurs, ce n'est pas une trame de diagnostic
  if(pvValues.size() != 32){
    cout << "zmsResultFrame::decode(): received " << pvValues.size() << " elements" << endl;
    return true;
  }
  // Itérateur pour le parcour des valeurs
  i=pvValues.begin();
  // Type de trame: si la 1ère adresse n'est pas 0xEEE0, ce n'est pas une trame de diagnostic
  if((*i).first != 0xEEE0){
    pvType = RESULT_FRAME;
    return true;
  }
  // Ici nous avons une trame de diagnostic
  pvType = DIAG_FRAME;
  // La première adresse doit être 0xEEE0
  // Word 1 - Adresse de la station locale
  pvLocalDeviceAddress = (*i).second;
  i++;
  // Word 1 - Nombre de sous-stations trouvées
  pvUstCount = (*i).second;
  i++;
  // Word 2 - Adresse de la 1ère sous-station
  pvFirstUstAddress = (*i).second;
  i++;
  // Word 2 - Adresse de la 2e sous-station
  pvSecondUstAddress = (*i).second;
  i++;
  // Word 3 - Adresse de la 3e sous-station
  pvThirdUstAddress = (*i).second;
  i++;
  // Word 3 - Adresse de la 4e sous-station
  pvFourthUstAddress = (*i).second;
  i++;
  // Word 4 - Attelage Loc de la rame 1 en place (occupé)
  val = (*i).second;
  if(val & 0x10){
    pvCouplingLocTrain1set = true;
  }else{
    pvCouplingLocTrain1set = false;
  }
  // Word 4 - Attelage Bt de la rame 1 en place (occupé)
  if(val & 0x01){
    pvCouplingBtTrain1set = true;
  }else{
    pvCouplingBtTrain1set = false;
  }
  i++;
  // Word 4 - Attelage Loc de la rame 2 en place (occupé)
  val = (*i).second;
  if(val & 0x10){
    pvCouplingLocTrain2set = true;
  }else{
    pvCouplingLocTrain2set = false;
  }
  // Word 4 - Attelage Bt de la rame 2 en place (occupé)
  if(val & 0x01){
    pvCouplingBtTrain2set = true;
  }else{
    pvCouplingBtTrain2set = false;
  }
  i++;
  // Word 5 - Attelage Loc de la rame 3 en place (occupé)
  val = (*i).second;
  if(val & 0x10){
    pvCouplingLocTrain3set = true;
  }else{
    pvCouplingLocTrain3set = false;
  }
  // Word 5 - Attelage Bt de la rame 3 en place (occupé)
  if(val & 0x01){
    pvCouplingBtTrain3set = true;
  }else{
    pvCouplingBtTrain3set = false;
  }
  i++;
  // Word 5 - Attelage Loc de la rame 4 en place (occupé)
  val = (*i).second;
  if(val & 0x10){
    pvCouplingLocTrain4set = true;
  }else{
    pvCouplingLocTrain4set = false;
  }
  // Word 5 - Attelage Bt de la rame 4 en place (occupé)
  if(val & 0x01){
    pvCouplingBtTrain4set = true;
  }else{
    pvCouplingBtTrain4set = false;
  }
  i++;
  /*
    Note: on reprend la convention du document GVT 7 551 239,
          L'indexation des bits va de 1 à 8 , et non de 0 à 7
  */
  // Word 6 - High byte - bit 1 - Ordre relais (de direction) pour direction A
  val = (*i).second;
  if(val & 0x01){
    pvSetDirectionSwitchToA = true;
  }else{
    pvSetDirectionSwitchToA = false;
  }
  // Word 6 - High byte - bit 2 - Bypass du bus NOTE: clarifier !
  if(val & 0x02){
    pvBypassBus = true;
  }else{
    pvBypassBus = false;
  }
  // Word 6 - High byte - bit 3 - Ordre de mise en place de la résistance de terminaison du bus
  if(val & 0x04){
    pvSetTerminalResistor = true;
  }else{
    pvSetTerminalResistor = false;
  }
  // Word 6 - High byte - bit 4 - Le master se trouve du côté B
  if(val & 0x08){
    pvDirectionToMasterIsB = true;
  }else{
    pvDirectionToMasterIsB = false;
  }
  // Word 6 - High byte - bit 8 - Baptême du train terminé
  if(val & 0x80){
    pvZmsInitComplete = true;
  }else{
    pvZmsInitComplete = false;
  }
  i++;
  // Word 6 - Low byte - bit 2 - Mode expl. extrémités bus ouverts
  val = (*i).second;
  if(val & 0x02){
    pvModeBusEndOpen = true;
  }else{
    pvModeBusEndOpen = false;
  }
  // Word 6 - Low byte - bit 4 - Dir. rech. du master par sous-station
  if(val & 0x08){
    pvMasterSearchBeginDirectionB = true;
  }else{
    pvMasterSearchBeginDirectionB = false;
  }
  // Word 6 - Low byte - bit 5 - Considérer fonction master
  if(val & 0x10){
    pvConsiderMasterFunction = true;
  }else{
    pvConsiderMasterFunction = false;
  }
  // Word 6 - Low byte - bit 8 - Libération pour transmissions
  if(val & 0x80){
    pvRunDataTransmission = true;
  }else{
    pvRunDataTransmission = false;
  }
  i++;
  // Word 7 - ZMS-NET en mode master
  val = (*i).second;
  if(val == 0x5A){
    pvZmsNetModeMaster = true;
  }else{
    pvZmsNetModeMaster = false;
  }
  i++;
  // Word 7 - Compteur de proogramme ZMS-NET
  pvZmsNetProgramCounterValue = (*i).second;
  i++;
  // Word 8 - L'énumération zms_mode_t correspond exactement aux valeurs
  // que retourne le ZMS,on se permet donc un simple transtypage
  pvMicasMode = (zms_mode_t)((*i).second);
  i++;
  pvMicasProgramCounterValue = (*i).second;
  i++;
  // Word 9
  pvUst1TransmissionState = (*i).second;
  i++;
  pvUst1TransmissionCounterValue = (*i).second;
  i++;
  // Word 10
  pvUst2TransmissionState = (*i).second;
  i++;
  pvUst2TransmissionCounterValue = (*i).second;
  i++;
  // Word 11
  pvUst3TransmissionState = (*i).second;
  i++;
  pvUst3TransmissionCounterValue = (*i).second;
  i++;
  // Word 12
  pvUst4TransmissionState = (*i).second;
  i++;
  pvUst4TransmissionCounterValue = (*i).second;
  i++;
  // Word 13 - High byte ne contient pas d'information
  i++;
  pvFromMasterTransmissionCounter = (*i).second;
  i++;
  // Word 14 - Critère d'attelage Nok
  val = (*i).second;
  if(val & 0x10){
    pvCouplingCriteriaFailure = true;
  }else{
    pvCouplingCriteriaFailure = false;
  }
  // Word 14 - Commande de secour ON
  if(val & 0x01){
    pvEmergencyControlEnabled = true;
  }else{
    pvEmergencyControlEnabled = false;
  }
  i++;
  // Word 14 - Mode de secour OFF
  val = (*i).second;
  if(val & 0x10){
    pvEmergencyModeDiseabled = true;
  }else{
    pvEmergencyModeDiseabled = false;
  }
  // Word 14 - ZMS-NET bloqué
  if(val & 0x01){
    pvZmsNetBlockedBecauseFrontCoupling = true;
  }else{
    pvZmsNetBlockedBecauseFrontCoupling = false;
  }
  i++;
  // Word 15 - Timeout
  val = (*i).second;
  if(val & 0x10){
    pvSearchTimeout = true;
  }else{
    pvSearchTimeout = false;
  }
  // Word 15 - Init en cours
  if(val & 0x01){
    pvZmsInitRunning = true;
  }else{
    pvZmsInitRunning = false;
  }
  i++;
  // Word 15 - Activations complètes Ok
  val = (*i).second;
  if(val & 0x10){
    pvFullOutputAuthorized = true;
  }else{
    pvFullOutputAuthorized = false;
  }
  // Word 15 - Critère d'attelage Ok
  if(val & 0x01){
    pvCoupligCriteriaOk = true;
  }else{
    pvCoupligCriteriaOk = false;
  }
  i++;
  // Word 16 - Compteur de toutes les UST Ok
  val = (*i).second;
  if(val & 0x10){
    pvAllDevicesProgramCounterRunning = true;
  }else{
    pvAllDevicesProgramCounterRunning = false;
  }
  // Word 16 - Transmission OK
  if(val & 0x01){
    pvTransmissionOk = true;
  }else{
    pvTransmissionOk = false;
  }
  i++;
  // Word 16 - Baptême terminé avec succès
  val = (*i).second;
  if(val & 0x10){
    pvZmsInitOk = true;
  }else{
    pvZmsInitOk = false;
  }
  // Word 16 - ZMS-NET ON
  if(val & 0x01){
    pvZmsNetON = true;
  }else{
    pvZmsNetON = false;
  }
  i++;
  assert(i == pvValues.end());
  return true;
!!!136962.cpp!!!	localDeviceAddress() : int
  return pvLocalDeviceAddress;
!!!137090.cpp!!!	ustCount() : int
  return pvUstCount;
!!!137218.cpp!!!	firstUstAddress() : int
  return pvFirstUstAddress;
!!!137346.cpp!!!	secondUstAddress() : int
  return pvSecondUstAddress;
!!!137474.cpp!!!	thirdUstAddress() : int
  return pvThirdUstAddress;
!!!137602.cpp!!!	fourthUstAddress() : int
  return pvFourthUstAddress;
!!!137730.cpp!!!	couplingLocTrain1set() : bool
  return pvCouplingLocTrain1set;
!!!137858.cpp!!!	couplingBtTrain1set() : bool
  return pvCouplingBtTrain1set;
!!!137986.cpp!!!	couplingLocTrain2set() : bool
  return pvCouplingLocTrain2set;
!!!138114.cpp!!!	couplingBtTrain2set() : bool
  return pvCouplingBtTrain2set;
!!!138242.cpp!!!	couplingLocTrain3set() : bool
  return pvCouplingLocTrain3set;
!!!138370.cpp!!!	couplingBtTrain3set() : bool
  return pvCouplingBtTrain3set;
!!!138498.cpp!!!	couplingLocTrain4set() : bool
  return pvCouplingLocTrain4set;
!!!138626.cpp!!!	couplingBtTrain4set() : bool
  return pvCouplingBtTrain4set;
!!!138754.cpp!!!	setDirectionSwitchToA() : bool
  return pvSetDirectionSwitchToA;
!!!138882.cpp!!!	bypassBus() : bool
  return pvBypassBus;
!!!139010.cpp!!!	setTerminalResistor() : bool
  return pvSetTerminalResistor;
!!!139138.cpp!!!	directionToMasterIsB() : bool
  return pvDirectionToMasterIsB;
!!!139266.cpp!!!	zmsInitComplete() : bool
  return pvZmsInitComplete;
!!!139394.cpp!!!	modeBusEndOpen() : bool
  return pvModeBusEndOpen;
!!!139522.cpp!!!	masterSearchBeginDirectionB() : bool
  return pvMasterSearchBeginDirectionB;
!!!139650.cpp!!!	considerMasterFunction() : bool
  return pvConsiderMasterFunction;
!!!139778.cpp!!!	runDataTransmission() : bool
  return pvRunDataTransmission;
!!!139906.cpp!!!	zmsNetModeMaster() : bool
  return pvZmsNetModeMaster;
!!!140034.cpp!!!	zmsNetProgramCounterValue() : int
  return pvZmsNetProgramCounterValue;
!!!140162.cpp!!!	micasMode() : zmsDiagFrame::zms_mode_t
  return pvMicasMode;
!!!140290.cpp!!!	micasProgramCounterValue() : int
  return pvMicasProgramCounterValue;
!!!140418.cpp!!!	ust1TransmissionState() : int
  return pvUst1TransmissionState;
!!!140546.cpp!!!	ust1TransmissionCounterValue() : int
  return pvUst1TransmissionCounterValue;
!!!140674.cpp!!!	ust2TransmissionState() : int
  return pvUst2TransmissionState;
!!!140802.cpp!!!	ust2TransmissionCounterValue() : int
  return pvUst2TransmissionCounterValue;
!!!140930.cpp!!!	ust3TransmissionState() : int
  return pvUst3TransmissionState;
!!!141058.cpp!!!	ust3TransmissionCounterValue() : int
  return pvUst3TransmissionCounterValue;
!!!141186.cpp!!!	ust4TransmissionState() : int
  return pvUst4TransmissionState;
!!!141314.cpp!!!	ust4TransmissionCounterValue() : int
  return pvUst4TransmissionCounterValue;
!!!141442.cpp!!!	fromMasterTransmissionCounter() : int
  return pvFromMasterTransmissionCounter;
!!!141570.cpp!!!	couplingCriteriaFailure() : bool
  return pvCouplingCriteriaFailure;
!!!141698.cpp!!!	emergencyControlEnabled() : bool
  return pvEmergencyControlEnabled;
!!!141826.cpp!!!	emergencyModeDiseabled() : bool
  return pvEmergencyModeDiseabled;
!!!141954.cpp!!!	zmsNetBlockedBecauseFrontCoupling() : bool
  return pvZmsNetBlockedBecauseFrontCoupling;
!!!142082.cpp!!!	searchTimeout() : bool
  return pvSearchTimeout;
!!!142210.cpp!!!	zmsInitRunning() : bool
  return pvZmsInitRunning;
!!!142338.cpp!!!	fullOutputAuthorized() : bool
  return pvFullOutputAuthorized;
!!!142466.cpp!!!	coupligCriteriaOk() : bool
  return pvCoupligCriteriaOk;
!!!142594.cpp!!!	allDevicesProgramCounterRunning() : bool
  return pvAllDevicesProgramCounterRunning;
!!!142722.cpp!!!	transmissionOk() : bool
  return pvTransmissionOk;
!!!142850.cpp!!!	zmsInitOk() : bool
  return pvZmsInitOk;
!!!142978.cpp!!!	zmsNetON() : bool
  return pvZmsNetON;
