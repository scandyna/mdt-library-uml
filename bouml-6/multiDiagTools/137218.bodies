class zmsResultFrame
!!!152706.cpp!!!	zmsResultFrame()

  pvType = UNKNOW_FRAME;
  pvDeviceError = 0;
!!!152834.cpp!!!	decode() : bool

  // On copie de la trame actuelle
  pvDecodedFrame = getStr();
  // Etat d'erreur retourné par le ZMS: par défaut 0, sera fixé plus loin
  pvDeviceError = 0;

  // On commence par supprimer les espaces en début et fin de trame
  if(!removeChar(true, false, true, pvDecodedFrame, ' ')){
    cerr << "zmsResultFrame::decode(): removeChar() failed for spaces" << endl;
    return false;
  }
  // On supprime aussi les caractère CR et LF
  if(!removeChar(true, true, true, pvDecodedFrame, 0x0D)){
    cerr << "zmsResultFrame::decode(): removeChar() failed for <CR> (0x0D)" << endl;
    return false;
  }
  if(!removeChar(true, true, true, pvDecodedFrame, 0x0A)){
    cerr << "zmsResultFrame::decode(): removeChar() failed for <LF> (0x0A)" << endl;
    return false;
  }
  // Le caractère étoile * du prompt ne sert pas non plus
  if(!removeChar(true, true, true, pvDecodedFrame, '*')){
    cerr << "zmsResultFrame::decode(): removeChar() failed for *" << endl;
    return false;
  }
  // On supprime le caractère de fin de trame
  if(!removeEOFchar(pvDecodedFrame)){
    cerr << "zmsResultFrame::decode(): removeEOFchar() failed" << endl;
    return false;
  }
  // S'il reste moin d'un élément, il n'y a pas de données
  if(pvDecodedFrame.size() < 1){
    cerr << "zmsResultFrame::decode(): bad frame (No data)" << endl;
    return false;
  }
  // Si la trame se termine par un '>' , il y a eu une erreur, on extrait le code <#xx>
  if(pvDecodedFrame.at(pvDecodedFrame.size()-1) == '>'){
    // S'il y a moins de 5 caractères, il n'y a rien a extraire -> trame erronnée
    if(pvDecodedFrame.size() < 5){
      cerr << "zmsResultFrame::decode(): bad frame (ends with '>' but less than 5 chars)" << endl;
      return false;
    }
    // On extrait la fin
    pvDecodedFrame = pvDecodedFrame.substr(pvDecodedFrame.size()-5, 5);
  }
  // Si la trame commence par un '<' , c'est une information
  if(pvDecodedFrame.at(0) == '<'){
    // On essaie de reconnaitre
    if(pvDecodedFrame == "<#00>"){
      // Annulation d'une opération en cours
      pvType = INFO_FRAME;
      pvDeviceError = 0;
    }else if(pvDecodedFrame == "<#01>"){
      // Erreur de syntaxe
      pvType = ERROR_FRAME;
      pvDeviceError = 1;
    }else if(pvDecodedFrame == "<#05>"){
      // Erreur de relecture (commande S)
      pvType = ERROR_FRAME;
      pvDeviceError = 5;
    }else if(pvDecodedFrame == "<#12>"){
      // Erreur de no de contrôle (commande R)
      pvType = ERROR_FRAME;
      pvDeviceError = 12;
    }else if(pvDecodedFrame == "<#13>"){
      // Erreur saisie (commande R)
      pvType = ERROR_FRAME;
      pvDeviceError = 13;
    }else{
      // Message inconnu
      pvType = UNKNOW_FRAME;
      pvDeviceError = 0;
      cerr << "zmsResultFrame::decode(): unknow frame type" << endl;
      return false;
    }
  }else{
    // Trame de données
    if(!decodeValues(pvDecodedFrame)){
      pvType = UNKNOW_FRAME;
      cerr << "zmsResultFrame::decode(): decodeValues() failed" << endl;
      return false;
    }
    pvType = RESULT_FRAME;
  }

  return true;
!!!152962.cpp!!!	clear() : void

  // Effacement des anciennes valeurs
  pvValues.clear();
  pvType = UNKNOW_FRAME;
  // On appelle la méthode de la classe mère
  zmsFrame::clear();
!!!153090.cpp!!!	decodedFrame() : string

  return pvDecodedFrame;
!!!153218.cpp!!!	type() : zmsResultFrame::type_t

  return pvType;
!!!153346.cpp!!!	deviceError() : int

  return pvDeviceError;
!!!153474.cpp!!!	availableValues() : int

  return (int)pvValues.size();
!!!153602.cpp!!!	firstAddress() : int

  map<int,int>::const_iterator i;

  if(pvValues.size() < 1){
    return -1;
  }
  i = pvValues.begin();
  // On retourne la clé du premier élément
  return (*i).first;
!!!153730.cpp!!!	valueAt(in address : int) : int

  map<int,int>::const_iterator i;

  if(pvValues.size() < 1){
    return -1;
  }
  i = pvValues.find(address);
  if(i == pvValues.end()){
    return -1;
  }
  // Adresse existe, on retourne la valeur
  return (*i).second;
!!!153858.cpp!!!	removeChar(in atBegin : bool, in atMiddle : bool, in atEnd : bool, inout str : string, in r : char) : bool

  size_t len;
  char c;
  size_t pos;

  // Début de chaine
  if(atBegin){
    pos = str.find_first_not_of(r);
    if(pos > 0){
      len = pos;
      str.erase(0, len);
    }
  }
  // Fin de chaine
  if(atEnd){
    len = str.size();
    if(len > 0){
      pos = len;
      while(pos > 0){
        pos--;
        c = str.at(pos);
        if(c != r){
          break;
        }
        str.erase(pos, 1);
      }
    }
  }
  // Milieur de chaine
  if(atMiddle){
    len = str.size();
    pos = 0;
    while(pos < len){
      c = str.at(pos);
      if(c == r){
        str.erase(pos, 1);
        len--;
      }else{
        pos++;
      }
    }
  }

  return true;
!!!153986.cpp!!!	removeSpaces(in atBegin : bool, in atMiddle : bool, in atEnd : bool) : bool

  string tmpFrame;
  bool ok;

  // Copie de la trame actuelle
  tmpFrame = takeStr();
  // Traitement
  ok = removeChar(atBegin, atMiddle, atEnd, tmpFrame, ' ');
  // On stocke le résultat
  put(tmpFrame.c_str(), tmpFrame.size());

  return ok;
!!!154114.cpp!!!	removeEOFchar(inout str : string) : bool

  size_t pos;

  pos = str.find(pvEOFchar);
  if(pos != string::npos){
    str.erase(pos, 1);
  }

  return true;
!!!154242.cpp!!!	removeEOFchar() : bool

  string tmpFrame;
  bool ok;

  // Copie de la trame actuelle
  tmpFrame = takeStr();
  // Traitement
  ok = removeEOFchar(tmpFrame);
  // On stocke le résultat
  put(tmpFrame.c_str(), tmpFrame.size());

  return true;
!!!154370.cpp!!!	decodeValues(inout str : string) : bool

  stringstream  fs, ls;
  string line, item, startAddress, values;
  int i;

  // On supprime les espaces en millieu (decode() à déjà supprimé en début et fin)
  if(!removeChar(false, true, false, str, ' ')){
    return false;
  }
  // On stocke dans le flux
  fs << str;
  // Séparation des "lignes"
  i = 0;
  while(!fs.eof()){
    getline(fs, line, ':');
    // La première "ligne" est un répétition de la commande
    if(i > 0){
      // Les 4 premiers caractères sont l'addresse de début
      if(line.size() < 4){
        return false;
      }
      startAddress = line.substr(0, 4);
      values = line.substr(4, line.size()-4);
      if(!storeValues(startAddress, values)){
        return false;
      }
    }
    i++;
  }
  // On vérifie d'avoir décodé qqch
  if(i<2){
    cerr << "zmsResultFrame::decodeValues(): no data decoded" << endl;
    return false;
  }

  return true;
!!!154498.cpp!!!	storeValues(in startAddress : string, in values : string) : bool

  int address = 0;
  int value = 0;
  size_t i;
  string byte;

  // S'il manque l'addresse ou les valeurs (chaine vide) , erreur
  if(startAddress.size() < 4){
    return false;
  }
  if(values.size() < 2){
    return false;
  }
  // On doit avoir un nombre d'octet paire pour les valeurs
  if((values.size() % 2) != 0){
    return false;
  }
  // Conversion de l'adresse de base
  if(sscanf(startAddress.c_str(), "%x", &address) != 1){
    return false;
  }
  // On parcour chaque byte
  for(i=0; i<values.size(); i+=2){
    byte = values.substr(i, 2);
    // Conversion de la valeur
    if(sscanf(byte.c_str(), "%x", &value) != 1){
      return false;
    }
    // On stocke - Note: conteneur de type map, l'instruction est bien une insertion (ou remplacement si clé déjà existante)
    pvValues[address] = value;
    address++;
  }
  return true;
