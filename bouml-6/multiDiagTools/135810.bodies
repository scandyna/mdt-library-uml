class zmsDeviceError
!!!134914.cpp!!!	zmsDeviceError()
  pvDiagFrame = 0;
  pvLanguage = "DE";
  //pvLogEnabled = false;
  pvErrorOccurred = false;
  pvCsvErrorList = "";
  pvHtmlErrorList = "";
  pvInitRunning = false;
!!!135170.cpp!!!	setDiagFrame(inout diagFrame : zmsDiagFrame) : void
  string csv;

  pvDiagFrame = &diagFrame;
  // On efface les erreurs précédente
  pvErrorNumberList.clear();

  // Si l'argument n'est pas une trame de diagnostic, on retourne
  if(diagFrame.type() != zmsResultFrame::DIAG_FRAME){
    return;
  }

  /*
    Détection des erreurs présentes
  */

  // Err. 6000 , échec du critère d'attelage
  if(diagFrame.couplingCriteriaFailure()){
    pvErrorNumberList.push_back(6000);
  }
  // Err. 6001 , commande de secour
  if(diagFrame.emergencyControlEnabled()){
    pvErrorNumberList.push_back(6001);
  }
  // Err. 6002 , mode de secour
  if(diagFrame.emergencyModeDiseabled()){
    pvErrorNumberList.push_back(6002);
  }
  // Err. 6003 , ZMS-NET verouillé
  if(diagFrame.zmsNetBlockedBecauseFrontCoupling()){
    pvErrorNumberList.push_back(6003);
  }
  // Err. 6004 , timeout ZMS
  if(diagFrame.searchTimeout()){
    pvErrorNumberList.push_back(6004);
  }
  // Err. 6005 , initialisation en cours
  if(diagFrame.zmsInitRunning()){
    //pvErrorNumberList.push_back(6005);
    pvInitRunning = true;
  }else{
    pvInitRunning = false;
  }
  // Err. 6006 , sorties complètes non authorisée
  if(!diagFrame.fullOutputAuthorized()){
    pvErrorNumberList.push_back(6006);
  }
  // Err. 6007 , dérengement des compteurs
  if(!diagFrame.allDevicesProgramCounterRunning()){
    pvErrorNumberList.push_back(6007);
  }
  // Err. 6008 , transmission perturbée
  if(!diagFrame.transmissionOk()){
    pvErrorNumberList.push_back(6008);
  }
  // Err. 6009 , dérengement ZMS-NET
  if(!diagFrame.zmsNetON()){
    pvErrorNumberList.push_back(6009);
  }
  // Etat d'erreur
  if(pvErrorNumberList.size() > 0){
    pvErrorOccurred = true;
  }
!!!135298.cpp!!!	errorList() : vector<int>
  return pvErrorNumberList;
!!!135426.cpp!!!	csvErrorList() : string
  return pvCsvErrorList;
!!!135554.cpp!!!	htmlErrorList() : string
  return pvHtmlErrorList;
!!!135682.cpp!!!	errorOccurred() : bool
  return pvErrorOccurred;
!!!135810.cpp!!!	resetErrorState() : void
  pvErrorOccurred = false;
!!!135938.cpp!!!	initRunning() : string
  if(pvInitRunning){
    if(pvLanguage == "DE"){
      return "Ja";
    }else if(pvLanguage == "FR"){
      return "Oui";
    }else{
      return "Yes";
    }
  }else{
    if(pvLanguage == "DE"){
      return "Nein";
    }else if(pvLanguage == "FR"){
      return "Non";
    }else{
      return "No";
    }
  }
!!!136066.cpp!!!	setCsvErrorList(in timestamp : string, in separator : string = "\t") : void
  vector<int>::const_iterator it;
  char strErrNum[20] = {'\0'};

  // On efface les erreur précédentes
  pvCsvErrorList = "";

  // Liste des erreurs
  for(it=pvErrorNumberList.begin(); it != pvErrorNumberList.end(); it++){
    pvCsvErrorList += timestamp;
    pvCsvErrorList += separator;
    // Initialisation ZMS en cours ?
    pvCsvErrorList += initRunning();
    pvCsvErrorList += separator;
    // Conversion du numéro d'erreur en chaine
    if(snprintf(strErrNum, 20, "%d", *it) < 1){
      pvCsvErrorList += "NaN";
    }else{
      pvCsvErrorList += strErrNum;
    }
    pvCsvErrorList += separator;
    // Texte
    pvCsvErrorList += text(*it, pvLanguage) + "\n";
  }
!!!136194.cpp!!!	setHtmlErrorList(in timestamp : string) : void
  vector<int>::const_iterator it;
  char strErrNum[20] = {'\0'};

  // On efface les erreur précédentes
  pvHtmlErrorList = "";

  // Liste des erreurs
  for(it=pvErrorNumberList.begin(); it != pvErrorNumberList.end(); it++){
    pvHtmlErrorList += "   <tr>\n";
    // Timestamp
    pvHtmlErrorList += "    <td>";
    pvHtmlErrorList += timestamp;
    pvHtmlErrorList += "</td>\n";
    // Initialisation ZMS en cours ?
    pvHtmlErrorList += "    <td align=\"center\">";
    pvHtmlErrorList += initRunning();
    pvHtmlErrorList += "</td>\n";
    // No d'erreur
    pvHtmlErrorList += "    <td align=\"center\">";
    // Conversion de l'erreur en chaine
    if(snprintf(strErrNum, 20, "%d", *it) < 1){
      pvHtmlErrorList += "NaN";
    }else{
      pvHtmlErrorList += strErrNum;
    }
    pvHtmlErrorList += "</td>\n";
    // Texte
    pvHtmlErrorList += "    <td>";
    pvHtmlErrorList += text(*it, pvLanguage);
    pvHtmlErrorList += "</td>\n";
    pvHtmlErrorList += "   </tr>\n";
  }
