class zmsSerialPort
!!!154626.cpp!!!	zmsSerialPort()
  pvSPhandle = INVALID_HANDLE_VALUE;
  pvOverlapped.hEvent = 0;
  pvLastWinAPIerrorText = "";
  pvLastWinAPIerrorNum = 0;
  pvByteTxWaitTime = 0;
  pvRxCpyBuffer = 0;
  pvTXframe = 0;
  pvRXframe = 0;
  //pvSendFrameOk = false;
  pvRXframeTimeout = 0;
!!!154754.cpp!!!	~zmsSerialPort()
  close();
!!!154882.cpp!!!	open(in portNumber : int, in byteTxWaitTime : int) : bool
  assert(portNumber > 0);
  assert(byteTxWaitTime >= 0);

  // Nom du port formaté
  char spStr[20];
  COMMPROP commProp;

  pvByteTxWaitTime = byteTxWaitTime;
  pvRXframeTimeout = 1000;

  // Formatage du nom du port com
  snprintf(spStr, 20, "COM%d", portNumber);

  // Fermeture d'une éventuelle instance précédente
  close();

  // Ouverture
  pvSPhandle = CreateFileA( spStr,                        // Port
                            GENERIC_READ | GENERIC_WRITE, // Accès en lecture et écriture
                            0,                            // Accès exclusif
                            NULL,                         // Aucune option de sécurité
                            OPEN_EXISTING,                // Overture si existant uniquement
                            FILE_FLAG_OVERLAPPED,         // Mode asynchrone
                            NULL                          // Template (ignoré lors d'ouverture de fichier existant)
                         );
  if(pvSPhandle == INVALID_HANDLE_VALUE){
    cerr << "zmsSerialPort::open(): CreateFileA() failed for port " << spStr << endl;
    storeError();
    return false;
  }
  // On récupère les propriétés supportées par le driver du port ouvert
  if(GetCommProperties(pvSPhandle, &commProp) == 0){
    cerr << "zmsSerialPort::open(): GetCommProperties() failed" << endl;
    storeError();
    return false;
  }
  // On fixe les taille des tampons système d'émission et réception selon possibilités
  // Si les tailles retournées sont de 0, pas de limite imposée par le driver
  if(commProp.dwMaxTxQueue == 0){
    pvTXbufferSize = 1024;
  }else{
    if(commProp.dwMaxTxQueue < 1024){
      pvTXbufferSize = commProp.dwMaxTxQueue;
    }else{
      pvTXbufferSize = 1024;
    }
  }
  if(commProp.dwMaxRxQueue == 0){
    pvRXbufferSize = 1024;
  }else{
    if(commProp.dwMaxRxQueue < 1024){
      pvRXbufferSize = commProp.dwMaxRxQueue;
    }else{
      pvRXbufferSize = 1024;
    }
  }
  // Buffer de copie temporaire
  if(pvRxCpyBuffer != 0){
    delete[] pvRxCpyBuffer;
  }
  pvRxCpyBuffer = new char[pvRXbufferSize];
  if(pvRxCpyBuffer == 0){
    cerr << "zmsSerialPort::open(): memory allocation failed for pvRxCpyBuffer" << endl;
    return false;
  }

  // Initialisation des paramètres
  if(SetupComm(pvSPhandle, pvRXbufferSize, pvTXbufferSize) == 0){
    cerr << "zmsSerialPort::open(): SetupComm() failed" << endl;
    storeError();
    return false;
  }

  // On désactive tous les évènements
  if(SetCommMask(pvSPhandle, 0) == 0){
    cerr << "zmsSerialPort::open(): SetCommMask() failed" << endl;
    storeError();
    return false;
  }
  // Structure de configuration du port série - On fait une configuration dédiée pour le ZMS
  pvDcb.DCBlength = sizeof(DCB);              // Taille de la structure DCB
  pvDcb.BaudRate = CBR_4800;                  // Taux de transfert, ici 4800 bps
  pvDcb.fBinary = TRUE;                       // Mode de transfert binaire (obligatoire)
  pvDcb.fParity = FALSE;                      // Contrôle de parité. Voir fErrorChar et Parity (inutilisé ici)
  pvDcb.fOutxCtsFlow = FALSE;                 // Pas de prise en compte du CTS (Clear To Send)
  pvDcb.fOutxDsrFlow = FALSE;                 // Pas de prise en compte du DSR (Data Set Ready)
  pvDcb.fDtrControl = DTR_CONTROL_ENABLE;     // On laisse la ligne DTR active (Data Terminal Ready)
  pvDcb.fDsrSensitivity = FALSE;              // Pas de prise en compte du DSR
  pvDcb.fTXContinueOnXoff = FALSE;            // On arrête de transmettre dè réception d'un XOFF en entrée
  pvDcb.fOutX = TRUE;                         // Utilisation du contrôle de flux XON/XOFF pour l'émission
  pvDcb.fInX = TRUE;                          // Utilisation du contrôle de flux XON/XOFF pour la réception
  pvDcb.fErrorChar = FALSE;                   // Si une erreur de parité est détectée, le Byte est remplacé par ErrorChar
  pvDcb.fNull = TRUE;                         // On ignore les Byte null (0x00) reçus
  pvDcb.fRtsControl = RTS_CONTROL_ENABLE;     // On laisse le RTS actif (Request To Send)
  pvDcb.fAbortOnError = TRUE;                 // Annulation de toute transmission (RX/TX) en cas d'erreur. Seul un appel à ClearCommError() permetra une reprise
  pvDcb.wReserved = 0;                        // Doit être mis à 0
  pvDcb.XonLim = (WORD)(pvRXbufferSize / 4);  // Limite minimale tolérée dans le buffer de réception avant que le contrôle de flux n'entre en action
  pvDcb.XoffLim = (WORD)(pvTXbufferSize / 4); // Limite minimale tolérée dans le buffer de réception avant que le contrôle de flux n'entre en action
  pvDcb.ByteSize = 8;                         // Longueur d'un Byte: ici 8 bits
  pvDcb.Parity = NOPARITY;                    // Pas de bit de parité
  pvDcb.StopBits = ONESTOPBIT;                // 1 bit de stop
  pvDcb.XonChar = DEFAULT_XON;                // Caractère XON
  pvDcb.XoffChar = DEFAULT_XOFF;              // Caractère XOFF
  pvDcb.ErrorChar = 0;                        // Un Byte reçus avec une erreur de parité est remplacé par ce caractère (inutilisé ici)
  pvDcb.EofChar = 0x04;                       // Caractère de fin de transmission

  // On applique les paramètres
  if(SetCommState(pvSPhandle, &pvDcb) == 0){
    cerr << "zmsSerialPort::open(): SetCommState() failed" << endl;
    storeError();
    return false;
  }
  // On récupère les timeouts actuels
  if(GetCommTimeouts(pvSPhandle, &pvComTimeouts) == 0){
    cerr << "zmsSerialPort::open(): GetCommTimeouts() failed" << endl;
    storeError();
    return false;
  }
  // Paramètres de timeouts
  pvComTimeouts.ReadIntervalTimeout = 1000;       // Temps maximum séparant la réception de 2 Bytes [ms]
  pvComTimeouts.ReadTotalTimeoutMultiplier = 1;   // Multiplicateur utilisé pour le calcul du timeout total pour la lecture
  pvComTimeouts.ReadTotalTimeoutConstant = 1000;  // Conatnte ajoutée au produit des 2 membres précédent [ms]
  pvComTimeouts.WriteTotalTimeoutMultiplier = 1;  // Multiplicateur utilisé pour le calcul du timeout total pour l'émission
  pvComTimeouts.WriteTotalTimeoutConstant = 1000; // Constante ajoutée
  // On applique les paramètres de timeouts
  if(SetCommTimeouts(pvSPhandle, &pvComTimeouts) == 0){
    cerr << "zmsSerialPort::open(): SetCommTimeouts() failed" << endl;
    storeError();
    return false;
  }
  // Initialsation de la structure overlapped
  memset(&pvOverlapped, 0, sizeof(pvOverlapped));
  // Création d'un évènement dans la structure overlapped si nécessaire
  if(pvOverlapped.hEvent == 0){
    pvOverlapped.hEvent = CreateEvent(NULL,   // Pas d'attribut de sécurité, l'évènement ne peut pas être hérité dans un processus enfant
                                      TRUE,   // Reset manuel de l'évènement
                                      FALSE,  // Evènement initialement non signalé
                                      NULL    // Aucun nom pour l'évènement
                                      );
    if(pvOverlapped.hEvent == 0){
      cerr << "zmsSerialPort::open(): CreateEvent() failed" << endl;
      storeError();
      return false;
    }
  }
  // Initialisation du reste de la structure overlapped à 0
  pvOverlapped.Internal = 0;
  pvOverlapped.InternalHigh = 0;
  pvOverlapped.Offset = 0;
  pvOverlapped.OffsetHigh = 0;

  // Démarrage du thread
  if(!start()){
    return false;
  }

  return true;
!!!155010.cpp!!!	close() : void
  // Arrêt du thread
  stop();
  // Buffer de copie temporaire
  if(pvRxCpyBuffer != 0){
    delete[] pvRxCpyBuffer;
    pvRxCpyBuffer = 0;
  }
  // Si le port est déjà fermé, on ne fait rien
  if(pvSPhandle == INVALID_HANDLE_VALUE){
    return;
  }
  // Fermeture d'un éventuel évènement
  if(pvOverlapped.hEvent != 0){
    CloseHandle(pvOverlapped.hEvent);
  }
  pvOverlapped.hEvent = 0;
  // On désactive les signaux DTR et RTS
  EscapeCommFunction(pvSPhandle, CLRDTR);
  EscapeCommFunction(pvSPhandle, CLRRTS);
  // Fermeture du port
  CloseHandle(pvSPhandle);
  pvSPhandle = INVALID_HANDLE_VALUE;
!!!155138.cpp!!!	sendFrame(inout frame : zmsFrame) : void
  assert(pvSPhandle != INVALID_HANDLE_VALUE);

  lockMutex();
  pvLastTxError = ZMS_NO_ERROR;
  pvTXframe = &frame;
  unlockMutex();
!!!155266.cpp!!!	sendFrameEnd() : bool
  bool retVal = false;

  lockMutex();
  // En cas d'erreur, l'émission est terminée
  if(pvLastTxError != ZMS_NO_ERROR){
    retVal = true;
    pvTXframe = 0;
  }else{
    if(pvTXframe != 0){
      if(pvTXframe->available() > 0){
        retVal = false;
      }else{
        retVal = true;
        pvTXframe = 0;
      }
    }else{
      retVal = true;
    }
  }
  unlockMutex();

  return retVal;
!!!155394.cpp!!!	sendFrameOk() : bool
  bool retVal = false;

  lockMutex();
  if(pvLastTxError == ZMS_NO_ERROR){
    retVal = true;
  }else{
    retVal = true;
  }
  unlockMutex();

  return retVal;
!!!155522.cpp!!!	receiveFrameBegin(inout frame : zmsFrame, in timeout : int = INFINITE) : void
  assert(pvSPhandle != INVALID_HANDLE_VALUE);

  lockMutex();
  pvRXframe = &frame;
  pvRXframeTimeout = timeout;
  pvLastRxError = ZMS_NO_ERROR;
  unlockMutex();
!!!155650.cpp!!!	receiveFrameEnd() : bool
  bool retVal = false;

  lockMutex();
  // En cas d'erreur, la réception est terminée
  if(pvLastRxError != ZMS_NO_ERROR){
    retVal = true;
    pvRXframe = 0;
  }else{
    // On regarde selon état de la trame
    if(pvRXframe != 0){
      if(pvRXframe->isComplete()){
        retVal = true;
        // Si la trame est complète mais invalide, le tampon est plein mais il le caractère de fin de trame n'est pas présent
        if(!pvRXframe->isValid()){
          pvLastRxError = ZMS_ERROR_RX_BUFFER_FULL;
        }
        pvRXframe = 0;
      }else{
        retVal = false;
      }
    }
  }
  unlockMutex();

  return retVal;
!!!155778.cpp!!!	flushRx() : bool
  assert(pvSPhandle != INVALID_HANDLE_VALUE);

  lockMutex();
  if(PurgeComm (pvSPhandle, PURGE_RXCLEAR) == 0){
    cerr << "zmsSerialPort::flushRx(): PurgeComm() failed" << endl;
    unlockMutex();
    storeError();
    return false;
  }
  unlockMutex();

  return true;
!!!155906.cpp!!!	flushTx() : bool
  assert(pvSPhandle != INVALID_HANDLE_VALUE);

  lockMutex();
  if(PurgeComm (pvSPhandle, PURGE_TXCLEAR) == 0){
    cerr << "zmsSerialPort::flushTx(): PurgeComm() failed" << endl;
    unlockMutex();
    storeError();
    return false;
  }
  unlockMutex();

  return true;
!!!156034.cpp!!!	flushRxTx() : bool
  if(!flushRx()){
    return false;
  }
  return flushTx();
!!!156162.cpp!!!	writeByte(in byte : char) : bool
  assert(pvSPhandle != INVALID_HANDLE_VALUE);

  DWORD comError;
  COMSTAT comStat;
  DWORD written;
  bool canWrite;

  /**
    Le contrôle de flux Xon/Xoff est gérée par le système.
    Si le ZMS nous envoie un Xoff, l'émission va s'arrêter, 
    par contre, lorsqu'il renverra Xon, tout le tampon système
    lui sera transmis d'un seul coup, ce qu'il n'a pas le temp de gérer.
    Nous allons donc effectuer le transfert si possible, et attendre sinon.
  */
  canWrite = false;
  while(!canWrite){
    // On récupère et efface les dernières erreurs
    if(ClearCommError(pvSPhandle, &comError, &comStat) == 0){
      cerr << "zmsSerialPort::write(): ClearCommError() failed" << endl;
      storeError();
      return false;
    }
    // Par défaut
    canWrite = true;
    // Si on a reçu un Xoff, on attend
    if(comStat.fXoffHold != 0){
      Sleep(100);
      canWrite = false;
    }
    // Si le dernier byte n'a pas encore été transmis, on attends
    if(comStat.cbOutQue > 0){
      Sleep(100);
      canWrite = false;
    }
  }
  // Envois
  if(WriteFile(pvSPhandle, &byte, 1, &written, &pvOverlapped) == 0){
    comError = GetLastError();
    if(comError != ERROR_IO_PENDING){
      // Récupération des erreurs
      ClearCommError(pvSPhandle, &comError, &comStat);
      cerr << "zmsSerialPort::writeByte(): error happened !" << endl;
      storeError();
      return false;
    }
  }

  return true;
!!!156290.cpp!!!	read(inout frame : zmsFrame) : bool
  assert(pvSPhandle != INVALID_HANDLE_VALUE);
  assert(pvRxCpyBuffer != 0);

  int retVal;
  DWORD comError;
  COMSTAT comStat;
  DWORD toRead;
  DWORD readen;

  // On récupère et efface les dernières erreurs
  if(ClearCommError(pvSPhandle, &comError, &comStat) == 0){
    cerr << "zmsSerialPort::read(): ClearCommError() failed" << endl;
    pvLastRxError = ZMS_ERROR_RX_READ_FAIL;
    storeError();
    return false;
  }
  if(comError > 0){
    cerr << "zmsSerialPort::read(): comError: " << comError << endl;
    pvLastRxError = ZMS_ERROR_RX_READ_FAIL;
    return false;
  }
  // S'il n'y a rien dans le tampon de réception, on retourne
  if(comStat.cbInQue < 1){
    return true;
  }
  // Nombre d'éléments qu'il est possible de lire
  if((size_t)comStat.cbInQue < frame.bytesToRead()){
    toRead = comStat.cbInQue;
  }else{
    toRead = (DWORD)frame.bytesToRead();
  }
  // Lecture
  readen = 0;
  retVal = ReadFile(pvSPhandle, pvRxCpyBuffer, toRead, &readen, &pvOverlapped);
  if(retVal == 0){
    comError = GetLastError();
    if(comError != ERROR_IO_PENDING){
      // Récupération des erreurs
      ClearCommError(pvSPhandle, &comError, &comStat);
      cerr << "zmsSerialPort::read(): error happened, err mask: " << comError << endl;
      pvLastRxError = ZMS_ERROR_RX_READ_FAIL;
      return false;
    }
  }
  // Résultats de lecture
  readen = 0;
  if(GetOverlappedResult(pvSPhandle, &pvOverlapped, &readen, TRUE) == 0){
    cerr << "zmsSerialPort::read(): GetOverlappedResult() failed" << endl;
    storeError();
    pvLastRxError = ZMS_ERROR_RX_READ_FAIL;
    return false;
  }
  // Stockage dans frame
  frame.append(pvRxCpyBuffer, (size_t)readen, true);

  return true;
!!!156418.cpp!!!	waitEvent(in eventMask : DWORD, in timeout : DWORD = INFINITE) : bool
  assert(pvSPhandle != INVALID_HANDLE_VALUE);

  DWORD error;
  DWORD event = 0;
  DWORD wait = 0;

  // (Re-) définition du masque d'évènement
  if(SetCommMask(pvSPhandle, eventMask) == 0){
    cerr << "zmsSerialPort::waitEvent(): SetCommMask() failed" << endl;
    storeError();
    return false;
  }
  if(WaitCommEvent(pvSPhandle, &event, &pvOverlapped) == 0){
    error = GetLastError();
    switch(error){
      case 0:
        break;
      case ERROR_IO_PENDING:
        Sleep(100);
        break;
      default:
        cerr << "zmsSerialPort::waitEot(): WaitCommEvent() failed" << endl;
        storeError();
        return false;
    }
  }
  // Attente blocante
  wait = WaitForSingleObject(pvOverlapped.hEvent, timeout);
  switch(wait){
    case WAIT_OBJECT_0:
      // Evènement attendu
      if(GetCommMask(pvSPhandle, &event) == 0){
        cerr << "zmsSerialPort::waitEvent(): GetCommMask() failed" << endl;
        storeError();
        ResetEvent(pvOverlapped.hEvent);
        return false;
      }
      if(event & eventMask){
        ResetEvent(pvOverlapped.hEvent);
        return true;
      }
      break;
    case WAIT_TIMEOUT:
        lockMutex();
        pvLastRxError = ZMS_ERROR_RX_TIMEOUT;
        unlockMutex();
        ResetEvent(pvOverlapped.hEvent);
        return false;
      break;
  }

  storeError();
  return false;
!!!156546.cpp!!!	waitRxChar(in timeout : int = INFINITE) : bool
  return waitEvent(EV_RXCHAR, timeout);
!!!156674.cpp!!!	run1() : void
  LARGE_INTEGER cptFrequency, startCpt, endCpt, diffCpt;
  int dt;                 // Intervale de mesure [ms]
  bool canMeasure;        // Il peut arriver que les fonction de timers haute résulution ne soient pas disponibles
  int byteTxWaitTime = 0;
  int toSleep = 0;
  bool pauseMode = true;  // S'il n'y a pas de données à transmettre, mode repos

  if(QueryPerformanceFrequency(&cptFrequency) == 0){
    canMeasure = false;
  }else{
    canMeasure = true;
  }

  // Récupération des paramètres nécessaires
  lockMutex();
  byteTxWaitTime = pvByteTxWaitTime;
  unlockMutex();

  // Démarrage initial du timer
  if(canMeasure){
    QueryPerformanceCounter(&startCpt);
  }

  while(!endThread()){
    // Temps écoulé depuis le dernier byte envoyé
    if(canMeasure){
      QueryPerformanceCounter(&endCpt);
      diffCpt.QuadPart = endCpt.QuadPart - startCpt.QuadPart;
      assert(cptFrequency.QuadPart != 0);
      dt = (int)(1000.0 * ((double)diffCpt.QuadPart / (double)cptFrequency.QuadPart));
    }else{
      dt = 0;
    }
    // Attente avant retransmission
    if(canMeasure){
      toSleep = byteTxWaitTime - dt;
    }else{
      toSleep = byteTxWaitTime;
    }
    if(toSleep > 0){
      Sleep(toSleep);
    }
    // On regarde si le temps avant transmission est écoulé
    if(dt >= byteTxWaitTime){
      // Envois de données
      lockMutex();
      // On vérifie qu'il y ait qqch à envoyer
      if(pvTXframe != 0){
        pauseMode = false;
        if(pvTXframe->available() > 0){
          // Envoi du byte
          if(!writeByte(pvTXframe->takeOne())){
            cerr << "zmsSerialPort::run() : cannot send a byte" << endl;
            pvLastTxError = ZMS_ERROR_TX_FAILURE;
          }else{
            pvLastTxError = ZMS_NO_ERROR;
          }
        }else{
          // La trame à été transmise
          pvTXframe = 0;
        }
      }else{
        pauseMode = true;
      }
      unlockMutex();
      // Redémarrage du timer
      if(canMeasure){
        QueryPerformanceCounter(&startCpt);
      }
    }
    // En mode repos, on laisse la main un moment
    if(pauseMode){
      Sleep(50);
    }
  }
!!!156802.cpp!!!	run2() : void
  int rxFrameTimeout = pvRXframeTimeout;

  while(!endThread()){
    // On attend l'arrivée de données
    waitRxChar((DWORD)rxFrameTimeout);
    // On vérifie s'il y a une trame à recevoir
    lockMutex();
    if(pvRXframe != 0){
      // Lecture des données disponibles
      if(!read(*pvRXframe)){
        cerr << "zmsSerialPort::run() : read() failed" << endl;
      }
    }else{
      // Pas de données attendues, on ignore les erreurs (typique: timeout)
      pvLastRxError = ZMS_NO_ERROR;
    }
    // Prise en compte du timeout
    rxFrameTimeout = pvRXframeTimeout;
    unlockMutex();
  }
