format 211

classcanvas 128002 class_ref 3890818 // AbstractModelWrapper
  classdiagramsettings member_max_width 0 end
  xyz 328 39 2000
end
classcanvas 128130 class_ref 3972098 // ModelContainer
  classdiagramsettings member_max_width 0 end
  xyz 176 146 2000
end
classcanvas 128386 class_ref 3594882 // ProxyModelContainer
  classdiagramsettings member_max_width 0 end
  xyz 41 336 2000
end
note 128642 "Warn: not want to store model to AbstractController and its subclasses ! (hard to mainain coherent!).

Maybe: keep ModelWrapper only so that AbstractController can call known methods in a uniform way.
For more specific cases, that AbstractController don't know, subclass should get pointer to QAbstractItemModel (ABstractController::sourceModel() ), and cast it. 

Note: what about a unified setModel() moethod ?
-> What about simple shadowing in subclass of controller ?
     Finally less ugly, not ?

---> Or: setModel() pure virtual in AbstractController.
        Subclass must then:
        - Create and set ModelWrapper to AbstractController
        - AbstractController then calls setModelToView() etc..
        AbstractController provides sourceModel() and modelForView()
        Subclass can proviede a model() method.
        AbstractController::sourceModel() allways returns the model  passed in setModelWrapper().
         Subclass can cast sourceModel() if it needs to interact with its concrete model"
  xyzwh 111.5 398.5 2005 697 425
relationcanvas 128258 relation_ref 4437122 // <directional composition>
  from ref 128130 z 2001 to ref 128002
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
relationcanvas 128514 relation_ref 4437250 // <directional composition>
  from ref 128130 z 2001 to ref 128386
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
end
