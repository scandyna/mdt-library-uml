class zmsFrame
!!!147202.cpp!!!	zmsFrame(in eof : char = EOT)
  pvFrame = 0;
  pvEOFchar = eof;
  pvIsComplete = false;
  pvIsValid = false;
!!!147330.cpp!!!	zmsFrame(inout src : zmsFrame)
  size_t i;

  // Initialisation
  pvFrame = new char[src.capacity()+1];
  assert(pvFrame != 0);
  // Copie
  for(i=0; i<=src.capacity(); i++){
    pvFrame[i] = src.pvFrame[i];
  }
  pvIsComplete = src.pvIsComplete;
  pvIsValid = src.pvIsValid;
!!!147458.cpp!!!	operator =(inout src : zmsFrame) : zmsFrame
  size_t i;

  if(&src != this){
    // Nouvelle instance de pvFrame
    if(pvFrame != 0){
      delete[] pvFrame;
    }
    pvFrame = new char[src.capacity()+1];
    assert(pvFrame != 0);
    // Méthode de copie de la classe mère
    zmsBuffer<char>::operator=(src);
    // Copie
    pvEOFchar = src.pvEOFchar;
    pvIsComplete = src.pvIsComplete;
    pvIsValid = src.pvIsValid;
    for(i=0; i<=src.capacity(); i++){
      pvFrame[i] = src.pvFrame[i];
    }
  }
  return *this;
!!!147586.cpp!!!	~zmsFrame()
  if(pvFrame != 0){
    delete[] pvFrame;
  }
!!!147714.cpp!!!	init(in size : size_t, in eofChar : char = 0) : bool
  size_t i;

  pvEOFchar = eofChar;
  // (Ré-)allocation
  if(pvFrame != 0){
    delete[] pvFrame;
  }
  // On alloue pour la taille + 0 terminal
  pvFrame = new char[size+1];
  if(pvFrame == 0){
    return false;
  }
  for(i=0; i<=size; i++){
    pvFrame[i] = '\0';
  }
  // On lance l'initialisation de la classe mère
  return zmsBuffer<char>::init(size);
!!!147842.cpp!!!	putStr(in str : char) : bool
  size_t len, written;

  // strlen() ne compte pas le caractère terminal
  len = strlen(str)+1;
  written = put(str, len);
  if(written < len){
    return false;
  }

  return true;
!!!147970.cpp!!!	append(in data : char, in len : size_t, in IgnoreNullChars : bool = true) : size_t
  size_t written;

  written = putUntil(data, eofChar(), len, IgnoreNullChars);
  // Flags
  if(tokenReached()){
    pvIsComplete = true;
    pvIsValid = true;
  }else{
    pvIsValid = false;
    if(full()){
      pvIsComplete = true;
    }else{
      pvIsComplete = false;
    }
  }

  return written;
!!!148098.cpp!!!	clear() : void
  pvIsComplete = false;
  pvIsValid = false;
  zmsBuffer<char>::clear();
!!!148226.cpp!!!	bytesToRead() : size_t
  if(isComplete()){
    return 0;
  }
  return remainCapacity();
!!!148354.cpp!!!	getStr() : char
  size_t readen;

  readen = get(pvFrame, available());
  pvFrame[readen] = '\0';

  return pvFrame;
!!!148482.cpp!!!	takeStr() : char
  size_t readen;

  readen = take(pvFrame, available());
  pvFrame[readen] = '\0';
  // Flags
  pvIsComplete = false;
  pvIsValid = false;

  return pvFrame;
!!!148610.cpp!!!	isComplete() : bool
  return pvIsComplete;
!!!148738.cpp!!!	isValid() : bool
  return pvIsValid;
!!!148866.cpp!!!	eofChar() : char
  return pvEOFchar;
!!!148994.cpp!!!	appendCR() : bool
  return putOne(0x0D);
