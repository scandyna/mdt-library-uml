class zmsCsvFileLine
!!!134402.cpp!!!	~zmsCsvFileLine()
  pvFields.clear();
!!!134530.cpp!!!	setLine(in line : string, in fieldSeparator : char, in dataProtectCar : char) : bool
  size_t i;
  string str;
  bool parserEnabled;

  // Par défaut, le parseur est actif
  parserEnabled = true;


  // Parcour du bloc lu
  for(i=0; i<line.size(); i++){
    // Si le parseur est actif, on réagis aux caractères clés
    if(parserEnabled){
      // Si on recontre le caractère de protection des données, on désactive le parseur
      if(line.at(i) == dataProtectCar){
        parserEnabled = false;
      }else if(line.at(i) == fieldSeparator){
        // Fin des données pour un champ, on cré une entrée dans la liste des champs
        pvFields.push_back(str);
        str = "";
      }else{
        // Simple caractère, on ajoute
        str += line.at(i);
      }
    }else{
      // Parseur inactif, on vérifie s'il faut le ré-activer
      if(line.at(i) == dataProtectCar){
        parserEnabled = true;
      }else{
        // On ajoute simplement le caractère
        str += line.at(i);
      }
    }
  }
  // Si le parseur est inactif c'est qu'un caractère de protection manque pour la fermeture
  // par exemple: "data" est valide, mais "data  est invalide
  if(!parserEnabled){
    cerr << "zmsCsvFileLine::setLine(): invalid file format, data protection char missing" << endl;
    return false;
  }
  // On ajoute le champ après le dernier séparateur
  pvFields.push_back(str);

  return true;
!!!134658.cpp!!!	valueAt(in column : int) : string
  if(column < 0){
    return "";
  }
  if(pvFields.size() < 1){
    return "";
  }
  if((size_t)column >= pvFields.size()){
    return "";
  }
  return pvFields.at(column);
!!!134786.cpp!!!	fields() : vector<string>
  return pvFields;
