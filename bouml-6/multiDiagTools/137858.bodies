class zmsThread
!!!157058.cpp!!!	zmsThread()
  pvEndThread = true;
  pvLastTxError = ZMS_NO_ERROR;
  pvLastRxError = ZMS_NO_ERROR;
  pvThreadHandle1 = INVALID_HANDLE_VALUE;
  pvThreadHandle2 = INVALID_HANDLE_VALUE;
  pvMutex = CreateMutex(NULL, FALSE, NULL);
!!!157186.cpp!!!	~zmsThread()
  stop();
  CloseHandle(pvMutex);
!!!157314.cpp!!!	start() : bool
  // On s'assure que le création du mutex ai réussi
  if(pvMutex == INVALID_HANDLE_VALUE){
    cerr << "zmsThread::start(): mutex creation failed" << endl;
    pvLastTxError = ZMS_ERROR_MUTEX_FAILURE;
    pvLastRxError = ZMS_ERROR_MUTEX_FAILURE;
    return false;
  }
  // Création du thread 1.
  pvThreadHandle1 = (HANDLE)_beginthreadex(NULL, 0, staticRun1, (void*)this, CREATE_SUSPENDED, NULL);
  if(pvThreadHandle1 == INVALID_HANDLE_VALUE){
    cerr << "zmsThread::start(): thread 1 creation failed" << endl;
    pvLastTxError = ZMS_ERROR_THREAD_FAILURE;
    pvLastRxError = ZMS_ERROR_THREAD_FAILURE;
    return false;
  }
  // Démarrage du thread 1
  pvEndThread = false;
  if((int)ResumeThread(pvThreadHandle1) == -1){
    cerr << "zmsThread::start(): thread 1 could not be started" << endl;
    pvLastTxError = ZMS_ERROR_THREAD_FAILURE;
    pvLastRxError = ZMS_ERROR_THREAD_FAILURE;
    return false;
  }
  // Création du thread 2.
  pvThreadHandle2 = (HANDLE)_beginthreadex(NULL, 0, staticRun2, (void*)this, CREATE_SUSPENDED, NULL);
  if(pvThreadHandle2 == INVALID_HANDLE_VALUE){
    cerr << "zmsThread::start(): thread 2 creation failed" << endl;
    pvLastTxError = ZMS_ERROR_THREAD_FAILURE;
    pvLastRxError = ZMS_ERROR_THREAD_FAILURE;
    return false;
  }
  // Démarrage du thread 1
  if((int)ResumeThread(pvThreadHandle2) == -1){
    cerr << "zmsThread::start(): thread 2 could not be started" << endl;
    pvLastTxError = ZMS_ERROR_THREAD_FAILURE;
    pvLastRxError = ZMS_ERROR_THREAD_FAILURE;
    return false;
  }

  return true;
!!!157442.cpp!!!	stop() : void
  DWORD retVal;

  // Flag d'arrêt
  lockMutex();
  pvEndThread = true;
  unlockMutex();

  // Arrêt du thread 1
  if(pvThreadHandle1 != INVALID_HANDLE_VALUE){
    // Attente de la fin d'exécution du thread
    retVal = WaitForSingleObject(pvThreadHandle1, INFINITE);
    switch(retVal){
      case WAIT_ABANDONED:
        cerr << "zmsThread::stop(): wait was abandonned for thread 1" << endl;
        break;
      case WAIT_TIMEOUT:
        cerr << "zmsThread::stop(): timeout for thread 1" << endl;
        break;
      case WAIT_FAILED:
        cerr << "zmsThread::stop(): wait failure for thread 1" << endl;
        break;
    }
    pvThreadHandle1 = INVALID_HANDLE_VALUE;
  }
  // Arrêt du thread 2
  if(pvThreadHandle2 != INVALID_HANDLE_VALUE){
    // Attente de la fin d'exécution du thread
    retVal = WaitForSingleObject(pvThreadHandle2, INFINITE);
    switch(retVal){
      case WAIT_ABANDONED:
        cerr << "zmsThread::stop(): wait was abandonned for thread 2" << endl;
        break;
      case WAIT_TIMEOUT:
        cerr << "zmsThread::stop(): timeout for thread 2" << endl;
        break;
      case WAIT_FAILED:
        cerr << "zmsThread::stop(): wait failure for thread 2" << endl;
        break;
    }
    pvThreadHandle2 = INVALID_HANDLE_VALUE;
  }
!!!157570.cpp!!!	lastTxError() : zms_error_t
  zms_error_t retVal = pvLastTxError;
  pvLastTxError = ZMS_NO_ERROR;
  return retVal;
!!!157698.cpp!!!	lastRxError() : zms_error_t
  zms_error_t retVal = pvLastRxError;
  pvLastRxError = ZMS_NO_ERROR;
  return retVal;
!!!157826.cpp!!!	lastWinAPIerror() : int
  return (int)pvLastWinAPIerrorNum;
!!!158210.cpp!!!	lockMutex() : bool
  DWORD retVal;

  retVal = WaitForSingleObject(pvMutex, INFINITE);
  switch(retVal){
    case WAIT_ABANDONED:
      cerr << "zmsThread::lockMutex(): wait was abandonned" << endl;
      pvLastTxError = ZMS_ERROR_MUTEX_FAILURE;
      pvLastRxError = ZMS_ERROR_MUTEX_FAILURE;
      return false;
    case WAIT_TIMEOUT:
      cerr << "zmsThread::lockMutex(): timeout" << endl;
      pvLastTxError = ZMS_ERROR_MUTEX_FAILURE;
      pvLastRxError = ZMS_ERROR_MUTEX_FAILURE;
      return false;
    case WAIT_FAILED:
      cerr << "zmsThread::lockMutex(): wait failure" << endl;
      pvLastTxError = ZMS_ERROR_MUTEX_FAILURE;
      pvLastRxError = ZMS_ERROR_MUTEX_FAILURE;
      return false;
  }

  return true;
!!!158338.cpp!!!	unlockMutex() : bool
  if(ReleaseMutex(pvMutex) == 0){
    cerr << "zmsThread::unlockMutex(): ReleaseMutex() failed" << endl;
    pvLastTxError = ZMS_ERROR_MUTEX_FAILURE;
    pvLastRxError = ZMS_ERROR_MUTEX_FAILURE;
    return false;
  }
  return true;
!!!158466.cpp!!!	endThread() : bool
  bool retVal;

  // En cas d'erreur sur le mutex, on retourne true (arrêt forcé)
  if(!lockMutex()){
    return true;
  }
  retVal = pvEndThread;
  if(!unlockMutex()){
    return true;
  }

  return retVal;
!!!158594.cpp!!!	storeError() : void
  char *errMsg = 0;

  lockMutex();
  pvLastWinAPIerrorNum = GetLastError();
  FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
                NULL, pvLastWinAPIerrorNum, 0, (LPTSTR)&errMsg, 0, NULL);
  pvLastWinAPIerrorText = (char*)errMsg;
  LocalFree(errMsg);
  unlockMutex();
