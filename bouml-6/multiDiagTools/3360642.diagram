format 211

classcanvas 128002 class_ref 3890818 // AbstractModelWrapper
  classdiagramsettings member_max_width 0 end
  xyz 88.8 41 2000
end
classcanvas 128130 class_ref 3890946 // SqlTableModelWrapper
  classdiagramsettings member_max_width 0 end
  xyz 41 863.2 2000
end
classcanvas 128386 class_ref 174210 // QSqlTableModel
  classdiagramsettings member_max_width 0 end
  xyz 296.6 808.2 2000
end
classcanvas 128514 class_ref 174338 // QSqlQueryModel
  classdiagramsettings member_max_width 0 end
  xyz 364.6 576.6 2006
end
classcanvas 129026 class_ref 3891202 // SqlQueryModelWrapper
  classdiagramsettings member_max_width 0 end
  xyz 162.2 642.6 2005
end
classcanvas 130306 class_ref 3965186 // AbstractItemModelWrapper
  classdiagramsettings member_max_width 0 end
  xyz 663.8 402.2 2000
end
classcanvas 130562 class_ref 146946 // QAbstractItemModel
  classdiagramsettings hide_attributes yes hide_operations yes member_max_width 0 end
  xyz 481.6 402.2 2012
end
classcanvas 131330 class_ref 147202 // QAbstractTableModel
  classdiagramsettings hide_attributes yes hide_operations yes member_max_width 0 end
  xyz 478.6 490.6 2018
end
note 131970 "Warn: not want to store model to AbstractController and its subclasses ! (hard to mainain coherent!).

Maybe: keep ModelWrapper only so that AbstractController can call known methods in a uniform way.
For more specific cases, that AbstractController don't know, subclass should get pointer to QAbstractItemModel (ABstractController::sourceModel() ), and cast it. 

Note: what about a unified setModel() moethod ?
-> What about simple shadowing in subclass of controller ?
     Finally less ugly, not ?

---> Or: setModel() pure virtual in AbstractController. <- Or no setModel() , but see below:
        Subclass must then:
        - Create and set ModelWrapper to AbstractController
        - AbstractController then calls setModelToView() etc..
        AbstractController provides sourceModel() and modelForView()
        Subclass can proviede a model() method.
        AbstractController::sourceModel() allways returns the model  passed in setModelWrapper().
         Subclass can cast sourceModel() if it needs to interact with its concrete model"
  xyzwh 386 122.8 2024 697 425
relationcanvas 128642 relation_ref 174978 // <generalisation>
  from ref 128386 z 2007 to ref 128514
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
relationcanvas 128770 relation_ref 4332546 // <unidirectional association>
  from ref 128130 z 2001 to ref 128386
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
relationcanvas 129154 relation_ref 4332674 // <generalisation>
  geometry VHV unfixed
  decenter_end 485
  from ref 128130 z 2001 to point 117 360
  line 131714 z 2001 to point 237 360
  line 131842 z 2001 to ref 128002
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
relationcanvas 129282 relation_ref 4332802 // <generalisation>
  decenter_begin 472
  decenter_end 485
  from ref 129026 z 2006 to ref 128002
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
relationcanvas 129666 relation_ref 4332930 // <unidirectional association>
  from ref 129026 z 2007 to ref 128514
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
relationcanvas 130434 relation_ref 4429954 // <generalisation>
  geometry VHV unfixed
  decenter_begin 475
  decenter_end 485
  from ref 130306 z 2001 to point 749 359
  line 130818 z 2001 to point 237 359
  line 130946 z 2001 to ref 128002
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
relationcanvas 130690 relation_ref 4430082 // <unidirectional association>
  from ref 130306 z 2013 to ref 130562
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
relationcanvas 131458 relation_ref 141186 // <generalisation>
  from ref 131330 z 2019 to ref 130562
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
relationcanvas 131586 relation_ref 175106 // <generalisation>
  from ref 128514 z 2019 to ref 131330
  no_role_a no_role_b
  no_multiplicity_a no_multiplicity_b
end
end
