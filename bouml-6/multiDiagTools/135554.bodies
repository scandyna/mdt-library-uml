class zmsTrainComposition
!!!158850.cpp!!!	zmsTrainComposition()
  pvZSTdiagFrame = 0;
  pvLastError = ZMS_NO_ERROR;
!!!158978.cpp!!!	~zmsTrainComposition()
  clear();
!!!159106.cpp!!!	setZSTdiagFrame(inout diagFrame : zmsDiagFrame) : void
  pvZSTdiagFrame = diagFrame;
!!!159234.cpp!!!	decode(in runDiagFrameDecode : bool = true) : bool
  assert(pvZSTdiagFrame != 0);

  // On efface les résultats précédents
  clear();
  // On lance le décodage si demandé
  if(runDiagFrameDecode){
    if(!pvZSTdiagFrame->decode()){
      pvLastError = ZMS_ERROR_FRAME_DECODE_FAIL;
      return false;
    }
  }
  // Il faut être connecté sur un ZMS maître, sinon, certaines informations
  // nécessaires ne sont pas disponibles, ou simplement fausses
  if(pvZSTdiagFrame->localDeviceAddress() != 0x20){
    cerr << "zmsTrainComposition::decode(): diagnostic frame is not provided by a ZST" << endl;
    pvLastError = ZMS_ERROR_COMP_FRM_NOT_ZST;
    return false;
  }
  // Formation de la composition du train
  formComposition();
  // Autres attributs
  setOtherAttributes();

  return true;
!!!159362.cpp!!!	clear() : void
  unsigned int i;

  // On efface chaque membre
  for(i=0; i<pvUnits.size(); i++){
    if(pvUnits.at(i) != 0){
      delete pvUnits.at(i);
    }
  }
  pvUnits.clear();
!!!159490.cpp!!!	unitAt(in position : int) : zmsTrainCompositionUnit
  unsigned int unitPos = (unsigned int)position;

  if(unitPos >= pvUnits.size()){
    return 0;
  }
  return pvUnits.at(unitPos);
!!!159618.cpp!!!	vehiculesCount() : int
  return (int)pvUnits.size()*2;
!!!159746.cpp!!!	vehiculeAt(in position : int) : zmsTrainVehicule
  unsigned int unitPos = (unsigned int)position/2;
  zmsTrainCompositionUnit *u;

  if(unitPos >= pvUnits.size()){
    return 0;
  }
  u = pvUnits.at(unitPos);
  if(u == 0){
    return 0;
  }
  return u->vehiculeAt(position%2);
!!!159874.cpp!!!	toString(in type : bool, in isZST : bool, in address : bool, in frontCoupling : bool, in btCoupling : bool, in direction : bool, in fieldSep : string, in vehiculeSep : string) : string
  int i;
  string str;
  char numStr[50] = {'\0'};

  str = "";
  for(i=0; i<vehiculesCount(); i++){
    //i = it-1;
    assert(vehiculeAt(i) != 0);
    // Type de véhicule
    if(type){
      str += vehiculeAt(i)->typeText();
      str += fieldSep;
    }
    // Type UST/ZST
    if(isZST){
      if(vehiculeAt(i)->isZST()){
        str += "ZST";
      }else{
        str += "UST";
      }
      str += fieldSep;
    }
    // Adresse du ZMS du véhicule
    if(address){
      if(snprintf(numStr, 50, "0x%x", vehiculeAt(i)->address()) < 1){
        cerr << "zmsTrainComposition::toString(): numerical conversion failed" << endl;
        return "";
      }
      str += numStr;
      str += fieldSep;
    }
    // Attelage frontal
    if(frontCoupling){
      str += "KPL ";
      if(vehiculeAt(i)->frontCouplingOccupied()){
        str += "occupied";
      }else{
        str += "free";
      }
      str += fieldSep;
    }
    // Attelage côté Bt
    if(btCoupling){
      str += "KPL BT ";
      if(vehiculeAt(i)->btCouplingOccupied()){
        str += "occupied";
      }else{
        str += "free";
      }
      str += fieldSep;
    }
    // Direction
    if(direction){
      if(vehiculeAt(i)->direction() == zmsTrainVehicule::NORMAL){
        str += "N";
      }else if(vehiculeAt(i)->direction() == zmsTrainVehicule::INVERTED){
        str += "I";
      }else{
        str += "U";
      }
      str += fieldSep;
    }
    // Fin du véhicule
    str += vehiculeSep;
  }

  return str;
!!!160002.cpp!!!	unitNumberStr(in sep : string) : string
  unsigned int i;
  string str;
  char numStr[50] = {'\0'};

  str = "";
  for(i=0; i<pvUnits.size(); i++){
    if(snprintf(numStr, 50, "%d", pvUnits.at(i)->number()) < 1){
      cerr << "zmsTrainComposition::unitNumberStr(): numerical conversion failed" << endl;
      return "";
    }
    str += numStr;
    str += sep;
  }

  return str;
!!!160130.cpp!!!	lastError() : zms_error_t
  return pvLastError;
!!!160258.cpp!!!	formComposition() : void
  assert(pvZSTdiagFrame != 0);
  zmsTrainVehicule *v, *vz;
  zmsTrainCompositionUnit *u;
  int unitNumber;

  /*
    ZMS Local - Station maître (ZST)
  */
  unitNumber = 1;
  u = new zmsTrainCompositionUnit;
  vz = new zmsTrainVehicule;
  vz->setAddress(0x20);
  vz->setType(pvZSTdiagFrame->micasMode());
  // Ajout à l'unité
  u->addVehicule(vz);
  // Ajout à la composition
  u->setNumber(unitNumber);
  pvUnits.push_back(u);

  /*
    UST 1 : si la ZST est une Bt, cette UST fait partie de l'unité 1
  */
  if(pvZSTdiagFrame->ustCount() > 0){
    v = new zmsTrainVehicule;
    v->setAddress(pvZSTdiagFrame->firstUstAddress());
    v->setType(zmsDiagFrame::ULOK);

    if(vz->type() == zmsTrainVehicule::BTSBZ){
      // On ajoute à la première unité
      u->addVehicule(v);
    }else{
      // On créé une nouvelle unité
      u = new zmsTrainCompositionUnit;
      unitNumber++;
      // Ajout à l'unité
      u->setNumber(unitNumber);
      u->addVehicule(v);
      // On détermine de quel côté ranger cette unité
      if(v->address() < 0x20){
        // Va à l'arrière du train
        pvUnits.push_front(u);
      }else{
        // Va à l'avant du train
        pvUnits.push_back(u);
      }
    }
  }

  /*
    UST 2
  */
  if(pvZSTdiagFrame->ustCount() > 1){
    unitNumber++;
    u = new zmsTrainCompositionUnit;
    v = new zmsTrainVehicule;
    v->setAddress(pvZSTdiagFrame->secondUstAddress());
    v->setType(zmsDiagFrame::ULOK);
    // Ajout à l'unité
    u->setNumber(unitNumber);
    u->addVehicule(v);
    // On détermine de quel côté ranger cette unité
    if(v->address() < 0x20){
      // Va à l'arrière du train
      pvUnits.push_front(u);
    }else{
      // Va à l'avant du train
      pvUnits.push_back(u);
    }
  }

  /*
    UST 3
  */
  if(pvZSTdiagFrame->ustCount() > 2){
    unitNumber++;
    u = new zmsTrainCompositionUnit;
    v = new zmsTrainVehicule;
    v->setAddress(pvZSTdiagFrame->thirdUstAddress());
    v->setType(zmsDiagFrame::ULOK);
    // Ajout à l'unité
    u->setNumber(unitNumber);
    u->addVehicule(v);
    // On détermine de quel côté ranger cette unité
    if(v->address() < 0x20){
      // Va à l'arrière du train
      pvUnits.push_front(u);
    }else{
      // Va à l'avant du train
      pvUnits.push_back(u);
    }
  }

  /*
    UST 4
  */
  if(pvZSTdiagFrame->ustCount() > 3){
    unitNumber++;
    u = new zmsTrainCompositionUnit;
    v = new zmsTrainVehicule;
    v->setAddress(pvZSTdiagFrame->fourthUstAddress());
    v->setType(zmsDiagFrame::ULOK);
    // Ajout à l'unité
    u->setNumber(unitNumber);
    u->addVehicule(v);
    // On détermine de quel côté ranger cette unité
    if(v->address() < 0x20){
      // Va à l'arrière du train
      pvUnits.push_front(u);
    }else{
      // Va à l'avant du train
      pvUnits.push_back(u);
    }
  }
!!!160386.cpp!!!	setOtherAttributes() : void
  unsigned int i;

  for(i=0; i<pvUnits.size(); i++){
    pvUnits.at(i)->setAttributes(pvZSTdiagFrame);
  }
